<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C/C++ | VBlog]]></title>
  <link href="http://vblog.vell001.ml/blog/categories/c-slash-c-plus-plus/atom.xml" rel="self"/>
  <link href="http://vblog.vell001.ml/"/>
  <updated>2014-03-24T23:07:19+08:00</updated>
  <id>http://vblog.vell001.ml/</id>
  <author>
    <name><![CDATA[VellBibi]]></name>
    <email><![CDATA[vell001@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[复习C语言]]></title>
    <link href="http://vblog.vell001.ml/2014/03/21/c_learning.html"/>
    <updated>2014-03-21T00:00:00+08:00</updated>
    <id>http://vblog.vell001.ml/2014/03/21/c_learning</id>
    <content type="html"><![CDATA[<h2>Category: C/C++</h2>

<p>今天突然有感觉复习下C语言了，发现已经好久没有用过C编程了，话说最近都没有编过程序了都，趁现在还有点时间，好好学习下C了。话不多说上题目</p>

<hr />

<blockquote><p>请定义一个宏，比较两个数a、b的大小，不能使用大于、小于、if语句</p>

<p><strong>分析</strong>：要不使用符号比较数的大小，第一个想到的应该是最原始的方法，就是数的二进制表示（第一位为1表示这是一个负数），以及对二进制的操作</p>

<p>步骤：</p>

<blockquote><ol>
<li>得到当前系统的位数：sizeof函数</li>
<li>将1<strong>左移</strong>位数减一位得到一个最高位为1的二进制数，如: 0x10000000</li>
<li>将两数之差和0x10000000相<strong>与</strong>，如果为1，说明差是负数。。。</li>
</ol>
</blockquote>

<p>代码：
``` c</p>

<h1>include &lt;stdio.h></h1></blockquote>

<p>int const shift = sizeof(int) * 8 &ndash; 1;</p>

<h1>define max(a,b) ((((a)&ndash;(b))&amp;(1 &lt;&lt; shift))?b:a)</h1>

<p>// test
void main()
{</p>

<pre><code>printf("%d", max(23,3));
</code></pre>

<p>}
```
2014/3/21 22:45:13</p>

<hr />

<blockquote><p>输出源文件的标题和目前执行行的行数</p>

<p><strong>分析</strong>：掌握<strong>LINE</strong>和<strong>FILE</strong>这两个宏定义就行了</p>

<p><strong>代码</strong>：
``` c</p>

<h1>include <iostream></h1>

<p>using namespace std;</p></blockquote>

<p>int main()
{</p>

<pre><code>int line = __LINE__;
char* file = __FILE__;
cout &lt;&lt; "filename:" &lt;&lt; (file) &lt;&lt; ",line is " &lt;&lt; line &lt;&lt; endl;
return 0;
</code></pre>

<p>}
```
2014/3/21 23:06:16</p>

<hr />

<blockquote><p>实现一个快速排序算法</p>

<p><strong>C代码</strong>:
File /codes/c_learning/quicksort.c could not be found
<strong>Java代码</strong>:
``` java
package arithmetic;</p></blockquote>

<p>public class QuickSort {</p>

<pre><code>public static void main(String[] args) {
    int[] a = {6,5,42,3,2,4,67,7,2,9,4};
    a = sort(a, 0, a.length-1);
    for(int i=0; i&lt;a.length; i++){
        System.out.print(a[i] + "  ");
    }
    System.out.println();
}

public static int[] sort(int[] a, int low, int high){
    if(low &lt; high){
        int p = partition(a, low, high);
        sort(a, low, p-1);
        sort(a, p+1, high);
    }
    return a;
}

public static int partition(int[] a, int low, int high){
    int key = a[low];
    while(low &lt; high){
        while(low &lt; high &amp;&amp; a[high] &gt;= key) high--;
        a[low] = a[high];
        while(low &lt; high &amp;&amp; a[low] &lt;= key) low++;
        a[high] = a[low];
    }
    a[low] = key;
    return low;
}
</code></pre>

<p>}</p>

<h2>```</h2>

<blockquote><p>实现一个冒泡排序</p>

<p><strong>C代码</strong>:
``` c</p>

<h1>include &lt;stdio.h></h1></blockquote>

<p>int<em> BubbleSort(int</em> a, int n){</p>

<pre><code>int i = 0, j = 0, flag = 1, cup = 0;
for(i=n-1; i&gt;0 &amp;&amp; flag; i--){
    for(j=0; j&lt;i; j++){
        flag = 0;
        if(a[j] &gt; a[j+1]){
            cup = a[j];
            a[j] = a[j+1];
            a[j+1] = cup;
            flag = 1;
        }
    }
}
return a;
</code></pre>

<p>}</p>

<p>void main(){</p>

<pre><code>int a[15] = {12,3,3,4,54,2,5,76,23,4,56,2,4,6,4};
int i = 0;
BubbleSort(a, 15);
for(i=0; i&lt;15; i++){
    printf("%d  ", a[i]);
}
printf("\n");
</code></pre>

<p>}
```
2014/3/23 11:58:29</p>

<hr />

<blockquote><p>实现希尔排序</p>

<p><strong>C代码</strong>:
``` c</p>

<h1>include &lt;stdio.h></h1></blockquote>

<p>int<em> ShellSort(int</em> a, int n){</p>

<pre><code>int i = 0, j = 0, d = n, cup = 0;
for(d=n/2; d&gt;=1; d=d/2){
    for(i=d; i&lt;n; i++){
        cup = a[i];
        for(j=i-d; j&gt;=0 &amp;&amp; a[j]&gt;cup; j=j-d){
            a[j+d] = a[j];
        }
        a[j+d] = cup;
    }
}
return a;
</code></pre>

<p>}</p>

<p>int* GetRandomNum(int n) {</p>

<pre><code>srand( (unsigned)time( NULL ) ); 
int* a = (int*)malloc(n * sizeof(int));
int i = 0;
for(i=0; i&lt;n; i++) {
    a[i] = rand() % n;
}
return a;
</code></pre>

<p>}</p>

<p>void PrintList(int* a, int n){</p>

<pre><code>int i = 0;
for(i=0; i&lt;n; i++){
    printf("%d  ", a[i]);
}
printf("\n");
</code></pre>

<p>}</p>

<p>void main(){</p>

<pre><code>int* a = GetRandomNum(15);
PrintList(a, 15);
ShellSort(a, 15);
PrintList(a, 15);
</code></pre>

<p>}
```
2014/3/23 13:20:05</p>
]]></content>
  </entry>
  
</feed>
