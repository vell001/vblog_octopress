<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[VBlog]]></title>
  <link href="http://vblog.vell001.ml/atom.xml" rel="self"/>
  <link href="http://vblog.vell001.ml/"/>
  <updated>2014-04-05T00:11:35+08:00</updated>
  <id>http://vblog.vell001.ml/</id>
  <author>
    <name><![CDATA[VellBibi]]></name>
    <email><![CDATA[vell001@qq.com]]></email>
  </author>

  
  <entry>
    <title type="html"><![CDATA[在linux上安装octopress博客环境]]></title>
    <link href="http://vblog.vell001.ml/2014/04/04/install-octopress-linux.html"/>
    <updated>2014-04-04T19:24:05+08:00</updated>
    <id>http://vblog.vell001.ml/2014/04/04/install-octopress-linux</id>
    <content type="html"><![CDATA[<blockquote><p>说明：我之前已经在ubuntu上部署安装过octopress，现在是把环境搬到centos上，本教程适合已经成功安装过octopress的纯屌丝！<a href="http://octopress.org/docs">更多教程上官网看吧</a></p></blockquote>

<h2>安装全程</h2>

<ul>
<li>安装ruby环境（官网是1.9.3）

<blockquote><p>详见：<a href="http://vblog.vell001.ml/2014/03/24/install-ruby.html">Install_ruby</a></p></blockquote></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># install rvm</span>
</span><span class='line'>curl -L get.rvm.io | bash -s stable
</span><span class='line'><span class="nb">source</span> ~/.bashrc
</span><span class='line'><span class="nb">source</span> ~/.bash_profile
</span><span class='line'>
</span><span class='line'><span class="c"># 修改 RVM 的 Ruby 安装源到淘宝</span>
</span><span class='line'>sed -i -e <span class="s1">&#39;s/ftp\.ruby-lang\.org\/pub\/ruby/ruby\.taobao\.org\/mirrors\/ruby/g&#39;</span> ~/.rvm/config/db
</span><span class='line'>
</span><span class='line'><span class="c"># Install ruby 1.9.3</span>
</span><span class='line'>rvm install 1.9.3
</span><span class='line'>
</span><span class='line'><span class="c"># 使用 ruby 1.9.3</span>
</span><span class='line'>rvm use 1.9.3
</span><span class='line'>
</span><span class='line'><span class="c"># 设置默认ruby</span>
</span><span class='line'>rvm use 1.9.3 --default
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<ul>
<li>安装git环境（我的centos自带了）

<blockquote><p>安装详见：<a href="http://git-scm.com/download/linux">Download Git for Linux and Unix</a></p></blockquote></li>
<li>安装bundle</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gem install bundler
</span><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<pre><code>&gt; 在```bundle install```的时候可能会报错：```An error occurred while installing nokogiri (1.5.11), and Bundler cannot continue.```  
&gt; 一般直接```gem install nokogiri -v '1.5.11'```就行了，如果还不行，[点我去官网](http://nokogiri.org/tutorials/installing_nokogiri.html)，我使用```sudo yum install -y gcc ruby-devel libxml2 libxml2-devel libxslt libxslt-devel```解决了这个问题。
</code></pre>

<ul>
<li>安装pygments(用于语法高亮)

<blockquote><p><code>sudo yum install python-pygments</code><br/>
更多详见：<a href="http://vblog.vell001.ml/2014/03/24/install-pygments.html">install-pygments</a>
特别注意，你的python必须是2.x版本的，详情见：<a href="http://vblog.vell001.ml/2014/03/23/some-problem-with-octopress.html">some-problem-with-octopress</a></p></blockquote></li>
</ul>


<p class='post-footer'>
            原文地址:
            <a href='http://vblog.vell001.ml/2014/04/04/install-octopress-linux.html'>http://vblog.vell001.ml/2014/04/04/install-octopress-linux.html</a><br/>
            &nbsp;written by <a href='http://vblog.vell001.ml'>VellBibi</a>
            &nbsp;posted at <a href='http://vblog.vell001.ml'>http://vblog.vell001.ml</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hanoi(汉诺塔问题)]]></title>
    <link href="http://vblog.vell001.ml/2014/04/03/hanoi.html"/>
    <updated>2014-04-03T21:08:06+08:00</updated>
    <id>http://vblog.vell001.ml/2014/04/03/hanoi</id>
    <content type="html"><![CDATA[<h2>Hanoi问题由来</h2>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/0/07/Tower_of_Hanoi.jpeg" alt="hanoi" /></p>

<blockquote><p>法国数学家爱德华·卢卡斯曾编写过一个印度的古老传说：在世界中心贝拿勒斯（在印度北部）的圣庙里，一块黄铜板上插着三根宝石针。印度教的主神梵天在创造世界的时候，在其中一根针上从下到上地穿好了由大到小的64片金片，这就是所谓的汉诺塔。不论白天黑夜，总有一个僧侣在按照下面的法则移动这些金片：一次只移动一片，不管在哪根针上，小片必须在大片上面。僧侣们预言，当所有的金片都从梵天穿好的那根针上移到另外一根针上时，世界就将在一声霹雳中消灭，而梵塔、庙宇和众生也都将同归于尽。</p></blockquote>

<h2>Hanoi规则</h2>

<blockquote><p>在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘</p></blockquote>

<!-- more -->


<h2>分析</h2>

<ol>
<li>先把目标盘以上的盘片放到c上</li>
<li>再把目标盘放到b上</li>
<li>最后把c长的盘放到b上</li>
</ol>


<h2>递归实现</h2>

<figure class='code'><figcaption><span> (hanoi.c)</span> <a href='http://vblog.vell001.ml/downloads/code/c_learning/hanoi.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// record the step number</span>
</span><span class='line'><span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// move floor n to b from a</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">move</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">char</span> <span class="n">a</span><span class="p">,</span> <span class="kt">char</span> <span class="n">b</span><span class="p">){</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d  %d : %c-&gt;%c</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">++</span><span class="n">N</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// move a to b by c</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">hanoi</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">char</span> <span class="n">a</span><span class="p">,</span> <span class="kt">char</span> <span class="n">b</span><span class="p">,</span> <span class="kt">char</span> <span class="n">c</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="n">hanoi</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>      <span class="n">move</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>      <span class="n">hanoi</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">hanoi</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="sc">&#39;a&#39;</span><span class="p">,</span> <span class="sc">&#39;b&#39;</span><span class="p">,</span> <span class="sc">&#39;c&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>2014-04-03 21:08:06</p>

<p class='post-footer'>
            原文地址:
            <a href='http://vblog.vell001.ml/2014/04/03/hanoi.html'>http://vblog.vell001.ml/2014/04/03/hanoi.html</a><br/>
            &nbsp;written by <a href='http://vblog.vell001.ml'>VellBibi</a>
            &nbsp;posted at <a href='http://vblog.vell001.ml'>http://vblog.vell001.ml</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hash]]></title>
    <link href="http://vblog.vell001.ml/2014/04/03/hash.html"/>
    <updated>2014-04-03T08:24:05+08:00</updated>
    <id>http://vblog.vell001.ml/2014/04/03/hash</id>
    <content type="html"><![CDATA[<h2>HashTable（哈希表）</h2>

<blockquote><p>散列表（Hash table，也叫哈希表），是根据关键字（Key value）而直接访问在内存存储位置的数据结构。也就是说，它通过把键值通过一个函数的计算，映射到表中一个位置来访问记录，这加快了查找速度。这个映射函数称做散列函数，存放记录的数组称做散列表。<a href="http://zh.wikipedia.org/zh/%E5%93%88%E5%B8%8C%E8%A1%A8">wiki</a></p></blockquote>

<h3>散列函数</h3>

<ul>
<li>直接寻址法：取关键字或关键字的某个线性函数值为散列地址</li>
<li>数字分析法：分析一组key数据，尽可能利用这组数据来构造冲突几率低的散列地址</li>
<li>平方取中法：取关键字平方后的中间几位做散列地址</li>
<li>折叠法：将关键字分割成位数相同的几部分，最后一部分位数可以不同，然后取这几部分的叠加和（去除进位）作为散列地址。数位叠加可以有移位叠加和间界叠加两种方法。移位叠加是将分割后的每一部分的最低位对齐，然后相加；间界叠加是从一端向另一端沿分割界来回折叠，然后对齐相加。</li>
<li>随机数法：选择一随机函数，取关键字的随机值作为散列地址</li>
<li>除留余数法：取关键字被某个不大于散列表表长m的数p除后所得的余数为散列地址</li>
</ul>


<!-- more -->


<h3>冲突处理</h3>

<ul>
<li>链地址法</li>
</ul>


<h3>ELFHash算法</h3>

<figure class='code'><figcaption><span> (elfhash.c)</span> <a href='http://vblog.vell001.ml/downloads/code/c_learning/elfhash.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#define MOD 100;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">ELFHash</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">key</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="o">*</span><span class="n">key</span><span class="p">){</span>
</span><span class='line'>      <span class="n">h</span><span class="o">=</span><span class="p">(</span><span class="n">h</span><span class="o">&lt;&lt;</span><span class="mi">4</span><span class="p">)</span><span class="o">+*</span><span class="n">key</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">g</span><span class="o">=</span><span class="n">h</span><span class="o">&amp;</span><span class="mi">0</span><span class="n">Xf0000000L</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class='line'>          <span class="n">h</span><span class="o">^=</span><span class="n">g</span><span class="o">&gt;&gt;</span><span class="mi">24</span><span class="p">;</span>
</span><span class='line'>      <span class="n">h</span><span class="o">&amp;=~</span><span class="n">g</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">h</span><span class="o">%</span><span class="n">MOD</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="n">ELFHash</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
2014/4/3 9:37:11</p>

<p class='post-footer'>
            原文地址:
            <a href='http://vblog.vell001.ml/2014/04/03/hash.html'>http://vblog.vell001.ml/2014/04/03/hash.html</a><br/>
            &nbsp;written by <a href='http://vblog.vell001.ml'>VellBibi</a>
            &nbsp;posted at <a href='http://vblog.vell001.ml'>http://vblog.vell001.ml</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some_sort_algorithms]]></title>
    <link href="http://vblog.vell001.ml/2014/03/24/some-sort-algorithms.html"/>
    <updated>2014-03-24T23:27:26+08:00</updated>
    <id>http://vblog.vell001.ml/2014/03/24/some-sort-algorithms</id>
    <content type="html"><![CDATA[<p>复习下数据结构常用的排序算法，更多内容上<a href="http://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">wiki</a>
<a name="quicksort"/></p>

<h2>快速排序（不稳定 O(n log n)）</h2>

<blockquote><p>快速排序（Quicksort）是对冒泡排序的一种改进。由C. A. R. Hoare在1962年提出。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。<a href="http://baike.baidu.com/view/19016.htm">百度百科</a></p></blockquote>

<!-- more -->


<h3><strong>C代码</strong>:</h3>

<figure class='code'><figcaption><span> (quicksort.c)</span> <a href='http://vblog.vell001.ml/downloads/code/c_learning/quicksort.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;vell001.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define NUM 20</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 对a的[low, high]区间分成两个区，返回分界点</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">Partition</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">low</span><span class="p">,</span> <span class="kt">int</span> <span class="n">high</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">key</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">low</span><span class="p">];</span> <span class="c1">// 划分的关键点</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">){</span>
</span><span class='line'>      <span class="k">while</span><span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">high</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">key</span><span class="p">)</span> <span class="o">--</span><span class="n">high</span><span class="p">;</span> <span class="c1">// 找到比关键点小的节点</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="n">low</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">high</span><span class="p">];</span> <span class="c1">// 把小节点放到左边</span>
</span><span class='line'>      <span class="k">while</span><span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">low</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">key</span><span class="p">)</span> <span class="o">++</span><span class="n">low</span><span class="p">;</span> <span class="c1">// 找到比关键点大的节点</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="n">high</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">low</span><span class="p">];</span> <span class="c1">// 把小节点放到右边</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">a</span><span class="p">[</span><span class="n">low</span><span class="p">]</span> <span class="o">=</span> <span class="n">key</span><span class="p">;</span> <span class="c1">// 最后把关键点放到分界点</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">low</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 对a的[low, high]区间进行快速排序</span>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="nf">QSort</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">low</span><span class="p">,</span> <span class="kt">int</span> <span class="n">high</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">){</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Partition</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="p">);</span>
</span><span class='line'>      <span class="n">QSort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// 递归的对左分区快排</span>
</span><span class='line'>      <span class="n">QSort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">high</span><span class="p">);</span> <span class="c1">// 递归的对右分区快排</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="nf">QuickSort</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">QSort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">*</span> <span class="n">a</span> <span class="o">=</span> <span class="n">GetRandomNum</span><span class="p">(</span><span class="n">NUM</span><span class="p">);</span>
</span><span class='line'>  <span class="n">PrintList</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">NUM</span><span class="p">);</span>
</span><span class='line'>  <span class="n">QuickSort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">NUM</span><span class="p">);</span>
</span><span class='line'>  <span class="n">PrintList</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">NUM</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><strong>Java代码</strong>:</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">arithmetic</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">QuickSort</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="o">{</span><span class="mi">6</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">42</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">67</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">9</span><span class="o">,</span><span class="mi">4</span><span class="o">};</span>
</span><span class='line'>      <span class="n">a</span> <span class="o">=</span> <span class="n">sort</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">&quot;  &quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">sort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">low</span><span class="o">,</span> <span class="kt">int</span> <span class="n">high</span><span class="o">){</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="o">){</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="n">partition</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">low</span><span class="o">,</span> <span class="n">high</span><span class="o">);</span>
</span><span class='line'>          <span class="n">sort</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">low</span><span class="o">,</span> <span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>          <span class="n">sort</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">high</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">partition</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">low</span><span class="o">,</span> <span class="kt">int</span> <span class="n">high</span><span class="o">){</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">key</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">low</span><span class="o">];</span>
</span><span class='line'>      <span class="k">while</span><span class="o">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="o">){</span>
</span><span class='line'>          <span class="k">while</span><span class="o">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="o">[</span><span class="n">high</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">key</span><span class="o">)</span> <span class="n">high</span><span class="o">--;</span>
</span><span class='line'>          <span class="n">a</span><span class="o">[</span><span class="n">low</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">high</span><span class="o">];</span>
</span><span class='line'>          <span class="k">while</span><span class="o">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="o">[</span><span class="n">low</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">key</span><span class="o">)</span> <span class="n">low</span><span class="o">++;</span>
</span><span class='line'>          <span class="n">a</span><span class="o">[</span><span class="n">high</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">low</span><span class="o">];</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">a</span><span class="o">[</span><span class="n">low</span><span class="o">]</span> <span class="o">=</span> <span class="n">key</span><span class="o">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">low</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2014-03-24 23:22:02</p>

<hr />

<p><a name="bubblesort"/></p>

<h2>冒泡排序 （稳定 O(n2)）</h2>

<blockquote><p>它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。<a href="http://baike.baidu.com/view/254413.htm">百度百科</a></p></blockquote>

<h3><strong>C代码</strong>:</h3>

<figure class='code'><figcaption><span> (bubblesort.c)</span> <a href='http://vblog.vell001.ml/downloads/code/c_learning/bubblesort.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;vell001.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define NUM 20</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="nf">BubbleSort</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">cup</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">flag</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">){</span>
</span><span class='line'>      <span class="n">flag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 设置一个标记，当顺序已经排好后不再运行</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]){</span>
</span><span class='line'>              <span class="n">cup</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>              <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>              <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">cup</span><span class="p">;</span>
</span><span class='line'>              <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">*</span> <span class="n">a</span> <span class="o">=</span> <span class="n">GetRandomNum</span><span class="p">(</span><span class="n">NUM</span><span class="p">);</span>
</span><span class='line'>  <span class="n">PrintList</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">NUM</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BubbleSort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">NUM</span><span class="p">);</span>
</span><span class='line'>  <span class="n">PrintList</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">NUM</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2014/3/23 11:58:29</p>

<hr />

<p><a name="shellsort"/></p>

<h2>希尔排序（不稳定 O(n log n)）</h2>

<blockquote><p>希尔排序(Shell Sort)是插入排序的一种。是针对直接插入排序算法的改进。该方法又称缩小增量排序，因DL．Shell于1959年提出而得名。</p>

<p>先取一个小于n的整数d1作为第一个增量，把文件的全部记录分成d1个组。所有距离为d1的倍数的记录放在同一个组中。先在各组内进行直接插入排序；然后，取第二个增量d2&lt;d1重复上述的分组和排序，直至所取的增量dt=1(dt&lt;dt-l&lt;…&lt;d2&lt;d1)，即所有记录放在同一组中进行直接插入排序为止 <a href="http://baike.baidu.com/view/178698.htm">百度百科</a></p>

<h3><strong>C代码</strong>:</h3></blockquote>

<figure class='code'><figcaption><span> (shell_sort.c)</span> <a href='http://vblog.vell001.ml/downloads/code/c_learning/shell_sort.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;vell001.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define NUM 20</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="nf">ShellSort</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="n">n</span><span class="p">,</span> <span class="n">cup</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">d</span><span class="o">=</span><span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span> <span class="n">d</span><span class="o">&gt;=</span><span class="mi">1</span><span class="p">;</span> <span class="n">d</span><span class="o">=</span><span class="n">d</span><span class="o">/</span><span class="mi">2</span><span class="p">){</span> <span class="c1">// 增量d为上次增量的一半，初始增量为总长度的一半</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">d</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span> <span class="c1">// 分出来的所有组进行插入排序</span>
</span><span class='line'>          <span class="n">cup</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">-</span><span class="n">d</span><span class="p">;</span> <span class="n">j</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&gt;</span><span class="n">cup</span><span class="p">;</span> <span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="o">-</span><span class="n">d</span><span class="p">){</span>
</span><span class='line'>              <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="n">d</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="n">d</span><span class="p">]</span> <span class="o">=</span> <span class="n">cup</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">*</span> <span class="n">a</span> <span class="o">=</span> <span class="n">GetRandomNum</span><span class="p">(</span><span class="n">NUM</span><span class="p">);</span>
</span><span class='line'>  <span class="n">PrintList</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">NUM</span><span class="p">);</span>
</span><span class='line'>  <span class="n">ShellSort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">NUM</span><span class="p">);</span>
</span><span class='line'>  <span class="n">PrintList</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">NUM</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2014/3/23 13:20:05</p>

<hr />

<p><a name="heapsort"/></p>

<h2>堆排序（不稳定 O(n log n)）</h2>

<blockquote><p>堆排序(Heapsort)是指利用堆积树（堆）这种数据结构所设计的一种排序算法，可以利用数组的特点快速定位指定索引的元素。</p>

<p>堆排序（HeapSort）是一树形选择排序。堆排序的特点是：在排序过程中，将R[l..n]看成是一棵完全二叉树的顺序存储结构，利用完全二叉树中双亲结点和孩子结点之间的内在关系（参见二叉树的顺序存储结构），在当前无序区中选择关键字最大（或最小）的记录 <a href="http://baike.baidu.com/view/157305.htm">百度百科</a></p>

<h3><strong>c代码</strong>:</h3></blockquote>

<figure class='code'><figcaption><span> (heap_sort.c)</span> <a href='http://vblog.vell001.ml/downloads/code/c_learning/heap_sort.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;vell001.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define NUM 15</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 保证i位置为堆中最大的节点</span>
</span><span class='line'><span class="c1">// a:待调整堆数组，n:数组长度, i:待调整元素位置</span>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="nf">HeapAdjust</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">child</span><span class="p">,</span> <span class="n">cup</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// i: 父节点位置，child: 子节点位置（左:2*i+1,右:2*i+2）</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">cup</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">child</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">child</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">=</span><span class="n">child</span><span class="p">,</span> <span class="n">child</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">// 如果右节点大于左节点child指向右节点</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">child</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">child</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">child</span><span class="p">])</span> <span class="n">child</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="c1">// 如果子节点大于父节点则交换，并继续查找下一个节点（把当前的子节点当成新的父节点）</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">child</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">cup</span><span class="p">){</span>
</span><span class='line'>          <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">child</span><span class="p">];</span>
</span><span class='line'>          <span class="n">a</span><span class="p">[</span><span class="n">child</span><span class="p">]</span> <span class="o">=</span> <span class="n">cup</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span> <span class="c1">//如果不大于，则退出</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// a:待调整堆数组，n:数组长度</span>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="nf">HeapSort</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">cup</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// 初始化堆，即对所有的非叶子节点进行HeapAdjust</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">){</span>
</span><span class='line'>      <span class="n">HeapAdjust</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// 把堆顶节点（最大节点）和堆中最后一个节点交换，然后对堆中除最后一个节点外的其他节点进行HeapAdjust</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">){</span>
</span><span class='line'>      <span class="n">cup</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">cup</span><span class="p">;</span>
</span><span class='line'>      <span class="n">HeapAdjust</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">*</span> <span class="n">a</span> <span class="o">=</span> <span class="n">GetRandomNum</span><span class="p">(</span><span class="n">NUM</span><span class="p">);</span>
</span><span class='line'>  <span class="n">PrintList</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">NUM</span><span class="p">);</span>
</span><span class='line'>  <span class="n">HeapSort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">NUM</span><span class="p">);</span>
</span><span class='line'>  <span class="n">PrintList</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">NUM</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2014-03-24 23:54:03</p>

<hr />

<p><a name="mergesort"/></p>

<h2>归并排序（稳定 O(n log n) 需要O(n)额外空间）</h2>

<blockquote><p>归并操作(merge)，也叫归并算法，指的是将两个已经排序的序列合并成一个序列的操作。归并排序算法依赖归并操作。<a href="http://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">wiki</a></p>

<h3><strong>c代码</strong>:</h3></blockquote>

<figure class='code'><figcaption><span> (merge_sort.c)</span> <a href='http://vblog.vell001.ml/downloads/code/c_learning/merge_sort.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;vell001.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define NUM 20</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 合并a1,a2数组</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">Merge</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">a1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n1</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">a2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">*</span> <span class="n">cup</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">((</span><span class="n">n1</span><span class="o">+</span><span class="n">n2</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>  <span class="c1">// 按先放小数再放大数原则归并</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n1</span> <span class="o">&amp;&amp;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">n2</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">a1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">a2</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">cup</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">a2</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>          <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">cup</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">a1</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>          <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// 将可能剩下的数直接放到结尾</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n1</span><span class="p">)</span> <span class="n">cup</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">a1</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n2</span><span class="p">)</span> <span class="n">cup</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">a2</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// 把归并好的cup数组全部复制给a1</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n1</span><span class="o">+</span><span class="n">n2</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">a1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">cup</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// 释放cup</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">cup</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">MergeSort</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">// 二分a数组</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">n1</span> <span class="o">=</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">n2</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="n">n1</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span><span class="o">*</span> <span class="n">a1</span> <span class="o">=</span> <span class="n">a</span><span class="p">,</span> <span class="n">a2</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">n1</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">MergeSort</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="n">n1</span><span class="p">);</span> <span class="c1">// 递归排好左边</span>
</span><span class='line'>      <span class="n">MergeSort</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="n">n2</span><span class="p">);</span> <span class="c1">// 递归排好右边</span>
</span><span class='line'>      <span class="n">Merge</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="n">n1</span><span class="p">,</span> <span class="n">a2</span><span class="p">,</span> <span class="n">n2</span><span class="p">);</span> <span class="c1">// 归并两边</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">*</span> <span class="n">a</span> <span class="o">=</span> <span class="n">GetRandomNum</span><span class="p">(</span><span class="n">NUM</span><span class="p">);</span>
</span><span class='line'>  <span class="n">PrintList</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">NUM</span><span class="p">);</span>
</span><span class='line'>  <span class="n">MergeSort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">NUM</span><span class="p">);</span>
</span><span class='line'>  <span class="n">PrintList</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">NUM</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2014-03-25 15:48:58</p>

<hr />

<h2>vell001.h (我的小工具库)</h2>

<figure class='code'><figcaption><span> (vell001.h)</span> <a href='http://vblog.vell001.ml/downloads/code/c_learning/vell001.h'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;time.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//获取n个0～n的随机数</span>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="nf">GetRandomNum</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">srand</span><span class="p">(</span> <span class="p">(</span><span class="kt">unsigned</span><span class="p">)</span><span class="n">time</span><span class="p">(</span> <span class="nb">NULL</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">*</span> <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">n</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="nf">GetOrderedNum</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">*</span> <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">n</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 打印数组</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">PrintList</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d  &quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p class='post-footer'>
            原文地址:
            <a href='http://vblog.vell001.ml/2014/03/24/some-sort-algorithms.html'>http://vblog.vell001.ml/2014/03/24/some-sort-algorithms.html</a><br/>
            &nbsp;written by <a href='http://vblog.vell001.ml'>VellBibi</a>
            &nbsp;posted at <a href='http://vblog.vell001.ml'>http://vblog.vell001.ml</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install_pygments]]></title>
    <link href="http://vblog.vell001.ml/2014/03/24/install-pygments.html"/>
    <updated>2014-03-24T16:21:22+08:00</updated>
    <id>http://vblog.vell001.ml/2014/03/24/install-pygments</id>
    <content type="html"><![CDATA[<p>安装Pygments语法高亮
On OS X Leopard, Snow Leopard</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo easy_install Pygments
</span></code></pre></td></tr></table></div></figure>


<p>Alternatively on OS X with MacPorts:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo port install python25 py25-pygments
</span></code></pre></td></tr></table></div></figure>


<p></p>

<!-- more -->


<p>On Archlinux</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo pacman -S python-pygments
</span></code></pre></td></tr></table></div></figure>


<p>
On Ubuntu and Debian:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo apt-get install python-pygments
</span></code></pre></td></tr></table></div></figure>


<p>
On Fedora and CentOS:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo yum install python-pygments
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p class='post-footer'>
            原文地址:
            <a href='http://vblog.vell001.ml/2014/03/24/install-pygments.html'>http://vblog.vell001.ml/2014/03/24/install-pygments.html</a><br/>
            &nbsp;written by <a href='http://vblog.vell001.ml'>VellBibi</a>
            &nbsp;posted at <a href='http://vblog.vell001.ml'>http://vblog.vell001.ml</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install_ruby]]></title>
    <link href="http://vblog.vell001.ml/2014/03/24/install-ruby.html"/>
    <updated>2014-03-24T13:24:05+08:00</updated>
    <id>http://vblog.vell001.ml/2014/03/24/install-ruby</id>
    <content type="html"><![CDATA[<h3>Install rvm</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -L get.rvm.io | bash -s stable
</span><span class='line'>$ source ~/.bashrc
</span><span class='line'>$ source ~/.bash_profile</span></code></pre></td></tr></table></div></figure>


<h3>修改 RVM 的 Ruby 安装源到淘宝</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sed -i -e 's/ftp\.ruby-lang\.org\/pub\/ruby/ruby\.taobao\.org\/mirrors\/ruby/g' ~/.rvm/config/db</span></code></pre></td></tr></table></div></figure>


<h3>Install ruby 1.9.3</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm install 1.9.3</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h3>使用 ruby 1.9.3</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm use 1.9.3</span></code></pre></td></tr></table></div></figure>


<h3>设置默认ruby</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm use 1.9.3 --default </span></code></pre></td></tr></table></div></figure>


<blockquote><p>参考至：<a href="http://ruby-china.org/wiki/rvm-guide">RubyChina</a></p></blockquote>

<p class='post-footer'>
            原文地址:
            <a href='http://vblog.vell001.ml/2014/03/24/install-ruby.html'>http://vblog.vell001.ml/2014/03/24/install-ruby.html</a><br/>
            &nbsp;written by <a href='http://vblog.vell001.ml'>VellBibi</a>
            &nbsp;posted at <a href='http://vblog.vell001.ml'>http://vblog.vell001.ml</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu_wifi&pppoe]]></title>
    <link href="http://vblog.vell001.ml/2014/03/24/ubuntu-pppoe.html"/>
    <updated>2014-03-24T10:13:05+08:00</updated>
    <id>http://vblog.vell001.ml/2014/03/24/ubuntu-pppoe</id>
    <content type="html"><![CDATA[<p>学校现在上网全部要拨号，加上我在宿舍用的是无线路由，也就是要在ubuntu下实现连接wifi后再拨号，这个功能在默认的ubuntu网络设置里面是没有的，里面有dsl但是对有线网络使用的，有点小郁闷。不过总是有解决方法的，我这就介绍我的一种实现方法：<em>dsl-provider</em></p>

<ol>
<li>ubuntu12.04默认就安装了dsl-provider，直接上命令行设置dsl-provider:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo pppoeconf</span></code></pre></td></tr></table></div></figure>


<p>
<img src="http://vblog.vell001.ml/images/20140324125533.png" alt="pppoeconf" />
一直按照提示进行，注意倒数第二个提示，提示你要不要开机自动拨号，这个选<strong>no</strong>，不要自动拨号，因为经测试多次，都会卡在开机界面60S<code>waiting up to 60 more seconds for network configuration</code>,当然也有好的解决方法，但还是麻烦了一点，开机后自己拨号不是更好？～</p>

<!-- more -->


<ol>
<li>这样基本就能上网了，可是如果你急着重启了的话就会有问题了，重启后会发现网络图标莫名其妙不见了！！！
原因是：

<blockquote><p>pppoe的网络连接和network-manage的链接方式冲突<br/>
解决方法1：每次连接好pppoe后关机的话要先手动退出pppoe:</p></blockquote></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo poff dsl-provider</span></code></pre></td></tr></table></div></figure>


<p>,这样显然太麻烦了，看解决方法2吧！<br/>
解决方法2：清除pppoe设置,也就是把</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/network/interfaces</span></code></pre></td></tr></table></div></figure>


<p>文件里有关pppoeconf设定的东西全部注释掉:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gedit /etc/network/interfaces</span></code></pre></td></tr></table></div></figure>


<p>
只要留下这两行就行了:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>auto lo
</span><span class='line'>iface lo inet loopback
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>这样就完美解决了问题了，以后要拨号上网只要执行下：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo pon dsl-provider
</span></code></pre></td></tr></table></div></figure>


<p>就行了</p>

<p class='post-footer'>
            原文地址:
            <a href='http://vblog.vell001.ml/2014/03/24/ubuntu-pppoe.html'>http://vblog.vell001.ml/2014/03/24/ubuntu-pppoe.html</a><br/>
            &nbsp;written by <a href='http://vblog.vell001.ml'>VellBibi</a>
            &nbsp;posted at <a href='http://vblog.vell001.ml'>http://vblog.vell001.ml</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some_problem_with_octopress]]></title>
    <link href="http://vblog.vell001.ml/2014/03/23/some-problem-with-octopress.html"/>
    <updated>2014-03-23T22:13:05+08:00</updated>
    <id>http://vblog.vell001.ml/2014/03/23/some-problem-with-octopress</id>
    <content type="html"><![CDATA[<h2>今天我总算是使用上了高大上的octopress了，不容易啊，现在我把之前的博客全部搬到了octopress上了，在github上办博客让我不用再担心流量和广告了！～～～爽啊</h2>

<h3>我使用octopress时遇到的问题汇总：</h3>

<ul>
<li><code>Error: Permission denied (publickey)</code></li>
</ul>


<p><strong>说明：</strong>我第一次使用<code>rake deploy</code>命令，总是有一个错误，提示说<code>Error: Permission denied (publickey)</code>, 我开始没注意，后来才看见了，原来是我电脑还没有设置publickey</p>

<p><strong>解决：</strong></p>

<blockquote><ol>
<li>生成一个publickey:<code>ssh-keygen -lf ~/.ssh/id_rsa.pub</code></li>
<li>在github上添加publickey，详情：<a href="https://help.github.com/articles/error-permission-denied-publickey">github-help</a></li>
</ol>
</blockquote>

<!-- more -->


<ul>
<li><code>octopress/plugins/pygments_code.rb:27:in 'rescue in pygments': Pygments can't parse unknown language: cpp. (RuntimeError)</code></li>
</ul>


<p><strong>说明：</strong>在我以为成功安装完<em>pygments</em>后，再使用<code>rake deploy</code>命令时就出现这个错误，同样，我也没注意，折腾了半天，连post都不能更新了，郁闷了半天，后面发现我的<em>pygments</em>压根就没安装成功</p>

<p><strong>解决：</strong>这个问题已经很明确了，只要成功安装<em>pygments</em>就行了，接下来就是安装<em>pygments</em>的问题了</p>

<ul>
<li><code>Traceback (most recent call last):
File "/usr/bin/pycompile", line 36, in &lt;module&gt;
  from debpython.version import SUPPORTED, debsorted, vrepr, \
File "/usr/share/python/debpython/version.py", line 24, in &lt;module&gt;
  from ConfigParser import SafeConfigParser
ImportError: No module named 'ConfigParser'</code></li>
</ul>


<p><strong>说明：</strong>提示没有找到<em>ConfigParser</em>这个模块，果断google了下发现，我的ubuntu前几天刚升级了python3，结果<em>ConfigParser</em>这个模块在python3下是<em>configparser</em></p>

<p><strong>解决：</strong>这个问题简单，要么改代码，要么换python2，我电脑上还有python2，直接替换下python3，再次安装pygments就成功了，再次使用<code>rake deploy</code>就OK了，octopress已经在我的ubuntu上完美运行了</p>

<ul>
<li>&#8220;` error: failed to push some refs to &lsquo;git@github.com:user_name/user_name.github.io.git&rsquo;
To prevent you from losing history, non-fast-forward updates were rejected
Merge the remote changes (e.g. &lsquo;git pull&rsquo;) before pushing again.  See the
&lsquo;Note about fast-forwards&rsquo; section of &lsquo;git push &mdash;help&rsquo; for details.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>**说明：**这个是git版本不一致导致的
</span><span class='line'>**解决：**如提示所说，只要git pull下就好了，具体操作：  
</span><span class='line'>1.先进入_deploy文件夹:``` cd _deploy ```  
</span><span class='line'>2.然后执行git pull:</span></code></pre></td></tr></table></div></figure>


<p> sh
git pull git@github.com:user_name/user_name.github.io.git
<code>  
3.完了退出*_deploy*目录，再次</code>rake deploy&#8220;`, OK~</p>

<p class='post-footer'>
            原文地址:
            <a href='http://vblog.vell001.ml/2014/03/23/some-problem-with-octopress.html'>http://vblog.vell001.ml/2014/03/23/some-problem-with-octopress.html</a><br/>
            &nbsp;written by <a href='http://vblog.vell001.ml'>VellBibi</a>
            &nbsp;posted at <a href='http://vblog.vell001.ml'>http://vblog.vell001.ml</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[复习C语言]]></title>
    <link href="http://vblog.vell001.ml/2014/03/21/c_learning.html"/>
    <updated>2014-03-21T22:13:05+08:00</updated>
    <id>http://vblog.vell001.ml/2014/03/21/c_learning</id>
    <content type="html"><![CDATA[<p>今天突然有感觉复习下C语言了，发现已经好久没有用过C编程了，话说最近都没有编过程序了都，趁现在还有点时间，好好学习下C了。话不多说上题目</p>

<hr />

<blockquote><p>请定义一个宏，比较两个数a、b的大小，不能使用大于、小于、if语句</p>

<p><strong>分析</strong>：要不使用符号比较数的大小，第一个想到的应该是最原始的方法，就是数的二进制表示（第一位为1表示这是一个负数），以及对二进制的操作</p></blockquote>

<!-- more -->


<blockquote><p>步骤：</p>

<blockquote><ol>
<li>得到当前系统的位数：sizeof函数</li>
<li>将1<strong>左移</strong>位数减一位得到一个最高位为1的二进制数，如: 0x10000000</li>
<li>将两数之差和0x10000000相<strong>与</strong>，如果为1，说明差是负数。。。</li>
</ol>
</blockquote>

<p>代码：</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="k">const</span> <span class="n">shift</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span> <span class="mi">8</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define max(a,b) ((((a)-(b))&amp;(1 &lt;&lt; shift))?b:a)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// test</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="n">max</span><span class="p">(</span><span class="mi">23</span><span class="p">,</span><span class="mi">3</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2014/3/21 22:45:13</p>

<hr />

<blockquote><p>输出源文件的标题和目前执行行的行数</p>

<p><strong>分析</strong>：掌握<strong>LINE</strong>和<strong>FILE</strong>这两个宏定义就行了</p>

<p><strong>代码</strong>：</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">line</span> <span class="o">=</span> <span class="n">__LINE__</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span><span class="o">*</span> <span class="n">file</span> <span class="o">=</span> <span class="n">__FILE__</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;filename:&quot;</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">file</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;,line is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">line</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2014/3/21 23:06:16</p>

<hr />

<blockquote><p>不使用多余变量实现两个数的交换</p>

<p><strong>分析</strong>：1)使用<code>^</code>符号，2)使用<code>+/-</code>符号</p>

<p><strong>代码</strong>：</p></blockquote>

<figure class='code'><figcaption><span> (swap.c)</span> <a href='http://vblog.vell001.ml/downloads/code/c_learning/swap.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;vell001.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用与符号交换</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">swap_1</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">b</span><span class="p">){</span>
</span><span class='line'>  <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="o">*</span><span class="n">a</span> <span class="o">^</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'>  <span class="o">*</span><span class="n">b</span> <span class="o">=</span> <span class="o">*</span><span class="n">a</span> <span class="o">^</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'>  <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="o">*</span><span class="n">a</span> <span class="o">^</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用加减运算符交换</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">swap_2</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">b</span><span class="p">){</span>
</span><span class='line'>  <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="o">*</span><span class="n">a</span> <span class="o">+</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'>  <span class="o">*</span><span class="n">b</span> <span class="o">=</span> <span class="o">*</span><span class="n">a</span> <span class="o">-</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'>  <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="o">*</span><span class="n">a</span> <span class="o">-</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">a</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;(a=%d, b=%d)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="n">swap_1</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;(a=%d, b=%d)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="n">swap_2</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;(a=%d, b=%d)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2014-03-28 21:21:33</p>

<p class='post-footer'>
            原文地址:
            <a href='http://vblog.vell001.ml/2014/03/21/c_learning.html'>http://vblog.vell001.ml/2014/03/21/c_learning.html</a><br/>
            &nbsp;written by <a href='http://vblog.vell001.ml'>VellBibi</a>
            &nbsp;posted at <a href='http://vblog.vell001.ml'>http://vblog.vell001.ml</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VSim [a Racing-simulator by Vell001]]]></title>
    <link href="http://vblog.vell001.ml/2014/03/09/vsim.html"/>
    <updated>2014-03-09T12:13:05+08:00</updated>
    <id>http://vblog.vell001.ml/2014/03/09/vsim</id>
    <content type="html"><![CDATA[<h2>VSim [a racing-simulator by vell001]</h2>

<p>This is my first project about Racing. I am a Chinese with bad English, and today is my first time to use English to write a post, Sorry for my bad Engilsh first…</p>

<p>I start my project from last year(2013). I am learning from <em><a href="http://www.x-sim.de/forum/memberlist.php?mode=viewprofile&amp;u=2248">RacingMat</a></em>, here is his project:<a href="http://www.x-sim.de/forum/viewtopic.php?t=943">Finished 2DOF 12V DC wiper arduino playseat</a>. Thank <em><a href="http://www.x-sim.de/forum/memberlist.php?mode=viewprofile&amp;u=2248">RacingMat</a></em> very much!<br/>
My project is in progressing, I will update for every detail I finished. </p>

<hr />

<h3>Control Part</h3>

<p>I am using two 12V DC truck wiper motors, bought in <em><a href="http://www.taobao.com">taobao</a></em>;
The controller is <em><a href="http://www.arduino.cc">Arduino Uno</a></em>, and the motor driver is <em><a href="http://item.taobao.com/item.htm?id=16852136684">MotoMonster</a></em>(I don&rsquo;t do any advertising, this is an only one MotoMonster-driver I can find in taobao, I have no choice, so bought this one. Please give me a message if you find anthor driver, my email:<em><a href="mailto:vell001@qq.com">vell001@qq.com</a></em>, thanks.</p>

<!-- more -->


<p>Here are some pictures:</p>

<blockquote><p><img src="http://images.cnitblog.com/blog/478900/201312/14204352-33791a99c7f743039a95a49b1a05f13c.png" alt="items" /></p>

<p>Something I bought in taobao</p></blockquote>

<hr />

<blockquote><p><img src="http://images.cnitblog.com/blog/478900/201312/14204411-067f1f01ea93464ba7fb6e338787fe5c.jpg" alt="arduino" />
<img src="http://images.cnitblog.com/blog/478900/201312/14204432-85d2d2c0001b4b5c870ae26250de9a45.jpg" alt="arduino" />
<img src="http://images.cnitblog.com/blog/478900/201312/14204511-df9449897b6747e5859d087b5169c950.jpg" alt="arduino" />
<img src="http://images.cnitblog.com/blog/478900/201312/14204545-1fed53785c054128b47ec95138a62de2.jpg" alt="arduino" /></p>

<p>My arduino board, made in China.(*^_^*)</p></blockquote>

<hr />

<blockquote><p><img src="http://images.cnitblog.com/blog/478900/201312/14204614-cbacb685b45e45319b8ebe7792cce7a1.jpg" alt="motor driver" />
<img src="http://images.cnitblog.com/blog/478900/201312/14204643-66954c6dab6d40cb9e53064204d78aad.jpg" alt="motor driver" />
<img src="http://images.cnitblog.com/blog/478900/201312/14204733-42eb29fe70484861b6ecec81f240de5c.jpg" alt="motor driver" /></p>

<p>My motor-driver [MotoMonster], It&rsquo;s very suit for arduino uno.</p></blockquote>

<hr />

<blockquote><p><img src="http://images.cnitblog.com/blog/478900/201312/14204828-0076cac18e7848a4b4a6b20c5cbb02c8.jpg" alt="power" />
<img src="http://images.cnitblog.com/blog/478900/201312/14204853-1db3a2a3d5b9450ea568c07c1ae6847b.jpg" alt="power" />
<img src="http://images.cnitblog.com/blog/478900/201312/14204919-3c0cb01ee7784f7eb616590d145c0ffe.jpg" alt="power" /></p>

<p>My power supply, 12V 30A, look very nice. But the shopkeeper didn&rsquo;t give me a wire,
so sad for me. I am just a university student, have nothing can use for my project in my dormitory. So I broke my socket only for a wire, bad idea&hellip;but I don&rsquo;t have another idea</p></blockquote>

<hr />

<blockquote><p><img src="http://images.cnitblog.com/blog/478900/201312/14205009-32f854f7f8574dbd9a658bf63e0df438.jpg" alt="motor" />
<img src="http://images.cnitblog.com/blog/478900/201312/14205051-8f60ee4eb1a2451b80a58708e6b34776.jpg" alt="motor" />
<img src="http://images.cnitblog.com/blog/478900/201312/14204951-e99d7341dc80467f97da1a361ed05b0a.jpg" alt="motor" /></p>

<p>At first glance, it was bigger and much more powerful than I imagined. Out of curiousity, I splited it, its structure is very simple.<br/>
<img src="http://images.cnitblog.com/blog/478900/201312/14205119-53ae549817ef46dc8a7073b5a7980dfe.jpg" alt="motor" /></p></blockquote>

<hr />

<p>All parts of controller are ready, it&rsquo;s time to put all parts together.</p>

<hr />

<blockquote><p><img src="http://images.cnitblog.com/blog/478900/201312/14205138-39f6ca0545b346db8937baa78d4f3ce4.jpg" alt="controller" />
<img src="http://images.cnitblog.com/blog/478900/201312/14205206-d2a5c0081beb475a855b9b97173015bd.jpg" alt="controller" />
<img src="http://images.cnitblog.com/blog/478900/201312/14205224-ae8e58961e4d4324ac0453cdf3e04627.jpg" alt="controller" />
<img src="http://images.cnitblog.com/blog/478900/201312/14205255-465f5a74f4864281afdaf0e29f3daf14.jpg" alt="controller" /></p>

<p>Who can guess what kind of wire I am using? Yes, I am using <em>Ethernet Cable</em>. I have unpacked 3m <em>Ethernet Cable</em>. <em>Ethernet Cable</em> is a bit hard.</p></blockquote>

<hr />

<blockquote><p><img src="http://images.cnitblog.com/blog/478900/201312/14205323-2f26e09df861425eadc1ab3616114a4b.jpg" alt="potentiometer" />
<img src="http://images.cnitblog.com/blog/478900/201312/14205352-a3a4de41dd3840a0bbecf54e50a03220.jpg" alt="potentiometer" />
<img src="http://images.cnitblog.com/blog/478900/201312/14205416-5e89456d96f942f686ee9c59834e6aa1.jpg" alt="potentiometer" /></p>

<p>I bought those potentiometers from e-market, 10K Ohm. Using those potentiometers and my two motors to DIY two SERVO.</p></blockquote>

<hr />

<blockquote><p>Put circuit diagram here:</p>

<p><img src="http://vblog.vell001.ml/images/20120703223559.gif" width="900"/></p></blockquote>

<hr />

<blockquote><p>My controller&rsquo;s first test video:</p>

<p><embed src="http://www.tudou.com/v/nCs3C961Ixk/&resourceId=0_05_02_99&tid=0/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p></blockquote>

<hr />

<h3>Seat Part</h3>

<p> Yesterday, I bought 12m steel cube. Today I want to get a second-hand <em>cardan</em>.</p>

<p>2014/3/9 13:24:57</p>

<hr />

<p>I was not so lucky, I didn&rsquo;t find a <em>street scrap</em>. I asked a hostess of a garage for a new cardan, her price was so higher than my price that I expected. Then, I went back, and bought in taobao.</p>

<blockquote><p><img src="http://vblog.vell001.ml/images/20140309173426.png" alt="items" /></p>

<p>The cardan&rsquo;s size is 20*32*85 mm; and zhe <em>joint bearing</em> is M5 internal thread.</p></blockquote>

<hr />

<p>I still need some screws, some rebar, and a seat; Most importent thing is an <em>electric welding machine</em>! Good Luck to myself&hellip;</p>

<p>2014/3/9 17:42:37</p>

<hr />

<p>Yesterday, I had finish <em>Steel Skeleton</em> of my simulator, I&rsquo;ll put some picture here later.
I am so unlucky today. In the morning, I tried to fix my two motor on the <em>bottom support</em>, but I have failed. In the afternoon, I fixed my two motor and two <em>Support Bar</em>, I just want to conect all the controller part and adjust some detail, but something wrong with my <em>Driver-Broad</em>, when I turn on power support,   before long, I smelled a burning smell, I saw a <em>Audion</em> just had burned on the driver board. Then, I could adjust one potentiometer and all motor run. Bad luck!!! I&rsquo;ll buy a new driver for my two motors</p>

<p>2014/3/15 23:30:21</p>

<hr />

<p>I received my new <em>MotorDriver</em> today, I will forget <em>MotoMonster-Driver</em></p>

<blockquote><p><img src="http://vblog.vell001.ml/images/20140318182635.jpg" alt="MotorDriver" /></p>

<p>Look good, I&rsquo;ll test it tomorrow</p></blockquote>

<p>I rewrited all codes and redesigned wiring diagram, I&rsquo;ll put my codes here later, here is my own diagram:</p>

<blockquote><p><a href="http://vblog.vell001.ml/images/vsim_wiring_diagram.jpg"><img src="http://vblog.vell001.ml/images/20140318221922.png" alt="diagram" /></a></p>

<p>designed with <em>Photoshop</em></p></blockquote>

<p>2014/3/18 22:16:05</p>

<hr />

<p>I used <em>MonsterDriver</em> back, because the new driver have a big flaw. When my arduino poweroff or reboot, the driver&rsquo;s <em>PWM</em> pin will read some wrong data, and supply power to my motor, then it&rsquo;s will damage all my design.</p>

<p>I&rsquo;ll talk about some details later. I want to put my test video here now:</p>

<blockquote><p><embed src="http://www.tudou.com/v/83MhztKWNDM/&resourceId=99962045_05_02_99&tid=0/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed><br/>
2014/3/21 23:37:42</p></blockquote>

<hr />

<p>Today is a dark day for me. My <em>MonsterDriver</em> was completely broken! Bad Luck~ It&rsquo;s my mistake, last time I found my motor&rsquo;s power wire is connected to it&rsquo;s shell. When I powered <em>MonsterDriver</em> on, just like <em>ShortCircuit</em>, my <em>MonsterDriver</em> was burned(not completely broken). And then I thinked I had solved this problem, I fixed my motor on a <em>wood board</em>. I was too careless, I didn&rsquo;t notice that my two motor connected together through the upper frame!!!~~~This time my <em>MonsterDriver</em> was completely broken! I don&rsquo;t know why that my <em>MonsterDriver</em> only supply a positive voltage, in other words, the motor only can go forward. Very Very Sad!!! I must be more careful in future.<br/>
Some good news, I got a second hand seat, and finished all installations of the upper frame, In other words, my simulator just leaves the matter of the <em>motor driver</em> module. <br/>
2014-03-26 22:21:24</p>

<hr />

<p>Last sunday, I finished my <em>VSIM</em> project. It&rsquo;s amazing for me, although looks a bit ugly. This is my test video:</p>

<blockquote><p><embed src="http://player.youku.com/player.php/sid/XNjkzMDQ1NjQ0/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></p></blockquote>

<p>I am using my third <em>MotorDriver</em>, I am busy now, I&rsquo;ll update more detail later<br/>
2014-04-02 20:55:24</p>

<p class='post-footer'>
            原文地址:
            <a href='http://vblog.vell001.ml/2014/03/09/vsim.html'>http://vblog.vell001.ml/2014/03/09/vsim.html</a><br/>
            &nbsp;written by <a href='http://vblog.vell001.ml'>VellBibi</a>
            &nbsp;posted at <a href='http://vblog.vell001.ml'>http://vblog.vell001.ml</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, Octopress Blog]]></title>
    <link href="http://vblog.vell001.ml/2014/03/08/hello_world.html"/>
    <updated>2014-03-08T10:13:05+08:00</updated>
    <id>http://vblog.vell001.ml/2014/03/08/hello_world</id>
    <content type="html"><![CDATA[<p>hello, I am using octopress to write a post, I am so exciting&hellip;</p>

<p class='post-footer'>
            原文地址:
            <a href='http://vblog.vell001.ml/2014/03/08/hello_world.html'>http://vblog.vell001.ml/2014/03/08/hello_world.html</a><br/>
            &nbsp;written by <a href='http://vblog.vell001.ml'>VellBibi</a>
            &nbsp;posted at <a href='http://vblog.vell001.ml'>http://vblog.vell001.ml</a>
            </p>

]]></content>
  </entry>
  
</feed>
