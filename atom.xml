<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[VBlog]]></title>
  <link href="http://vblog.vell001.ml/atom.xml" rel="self"/>
  <link href="http://vblog.vell001.ml/"/>
  <updated>2014-03-23T23:44:14+08:00</updated>
  <id>http://vblog.vell001.ml/</id>
  <author>
    <name><![CDATA[VellBibi]]></name>
    <email><![CDATA[vell001@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Some_problem_with_octopress]]></title>
    <link href="http://vblog.vell001.ml/2014/03/23/some-problem-with-octopress.html"/>
    <updated>2014-03-23T22:13:05+08:00</updated>
    <id>http://vblog.vell001.ml/2014/03/23/some-problem-with-octopress</id>
    <content type="html"><![CDATA[<h2>今天我总算是使用上了高大上的octopress了，不容易啊，现在我把之前的博客全部搬到了octopress上了，在github上办博客让我不用再担心流量和广告了！～～～爽啊</h2>

<h3>我使用octopress时遇到的问题汇总：</h3>

<ul>
<li><code>Error: Permission denied (publickey)</code></li>
</ul>


<p><strong>说明：</strong>我第一次使用<code>rake deploy</code>命令，总是有一个错误，提示说<code>Error: Permission denied (publickey)</code>, 我开始没注意，后来才看见了，原来是我电脑还没有设置publickey</p>

<p><strong>解决：</strong></p>

<blockquote><ol>
<li>生成一个publickey:<code>ssh-keygen -lf ~/.ssh/id_rsa.pub</code></li>
<li>在github上添加publickey，详情：<a href="https://help.github.com/articles/error-permission-denied-publickey">github-help</a></li>
</ol>
</blockquote>

<ul>
<li><code>octopress/plugins/pygments_code.rb:27:in 'rescue in pygments': Pygments can't parse unknown language: cpp. (RuntimeError)</code></li>
</ul>


<p><strong>说明：</strong>在我以为成功安装完<em>pygments</em>后，再使用<code>rake deploy</code>命令时就出现这个错误，同样，我也没注意，折腾了半天，连post都不能更新了，郁闷了半天，后面发现我的<em>pygments</em>压根就没安装成功</p>

<p><strong>解决：</strong>这个问题已经很明确了，只要成功安装<em>pygments</em>就行了，接下来就是安装<em>pygments</em>的问题了</p>

<ul>
<li><code>Traceback (most recent call last):
File "/usr/bin/pycompile", line 36, in &lt;module&gt;
  from debpython.version import SUPPORTED, debsorted, vrepr, \
File "/usr/share/python/debpython/version.py", line 24, in &lt;module&gt;
  from ConfigParser import SafeConfigParser
ImportError: No module named 'ConfigParser'</code></li>
</ul>


<p><strong>说明：</strong>提示没有找到<em>ConfigParser</em>这个模块，果断google了下发现，我的ubuntu前几天刚升级了python3，结果<em>ConfigParser</em>这个模块在python3下是<em>configparser</em></p>

<p><strong>解决：</strong>这个问题简单，要么改代码，要么换python2，我电脑上还有python2，直接替换下python3，再次安装pygments就成功了，再次使用<code>rake deploy</code>就OK了，octopress已经在我的ubuntu上完美运行了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[复习C语言]]></title>
    <link href="http://vblog.vell001.ml/2014/03/21/c_learning.html"/>
    <updated>2014-03-21T00:00:00+08:00</updated>
    <id>http://vblog.vell001.ml/2014/03/21/c_learning</id>
    <content type="html"><![CDATA[<h2>复习C语言</h2>

<p>今天突然有感觉复习下C语言了，发现已经好久没有用过C编程了，话说最近都没有编过程序了都，趁现在还有点时间，好好学习下C了。话不多说上题目</p>

<hr />

<blockquote><p>请定义一个宏，比较两个数a、b的大小，不能使用大于、小于、if语句</p>

<p><strong>分析</strong>：要不使用符号比较数的大小，第一个想到的应该是最原始的方法，就是数的二进制表示（第一位为1表示这是一个负数），以及对二进制的操作</p>

<p>步骤：</p>

<blockquote><ol>
<li>得到当前系统的位数：sizeof函数</li>
<li>将1<strong>左移</strong>位数减一位得到一个最高位为1的二进制数，如: 0x10000000</li>
<li>将两数之差和0x10000000相<strong>与</strong>，如果为1，说明差是负数。。。</li>
</ol>
</blockquote>

<p>代码：</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="k">const</span> <span class="n">shift</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span> <span class="mi">8</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define max(a,b) ((((a)-(b))&amp;(1 &lt;&lt; shift))?b:a)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// test</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="n">max</span><span class="p">(</span><span class="mi">23</span><span class="p">,</span><span class="mi">3</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2014/3/21 22:45:13</p>

<hr />

<blockquote><p>输出源文件的标题和目前执行行的行数</p>

<p><strong>分析</strong>：掌握<strong>LINE</strong>和<strong>FILE</strong>这两个宏定义就行了</p>

<p><strong>代码</strong>：</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">line</span> <span class="o">=</span> <span class="n">__LINE__</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span><span class="o">*</span> <span class="n">file</span> <span class="o">=</span> <span class="n">__FILE__</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;filename:&quot;</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">file</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;,line is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">line</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2014/3/21 23:06:16</p>

<hr />

<blockquote><p>实现一个快速排序算法</p>

<p><strong>C代码</strong>:</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;time.h&gt; </span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define NUM 15</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">Partition</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">low</span><span class="p">,</span> <span class="kt">int</span> <span class="n">high</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">key</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">low</span><span class="p">];</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">){</span>
</span><span class='line'>      <span class="k">while</span><span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">high</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">key</span><span class="p">)</span> <span class="o">--</span><span class="n">high</span><span class="p">;</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="n">low</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">high</span><span class="p">];</span>
</span><span class='line'>      <span class="k">while</span><span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">low</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">key</span><span class="p">)</span> <span class="o">++</span><span class="n">low</span><span class="p">;</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="n">high</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">low</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">a</span><span class="p">[</span><span class="n">low</span><span class="p">]</span> <span class="o">=</span> <span class="n">key</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">low</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="nf">QSort</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">low</span><span class="p">,</span> <span class="kt">int</span> <span class="n">high</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">){</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Partition</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="p">);</span>
</span><span class='line'>      <span class="n">QSort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="n">QSort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">high</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="nf">QuickSort</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">QSort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="nf">GetRandomNum</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">srand</span><span class="p">(</span> <span class="p">(</span><span class="kt">unsigned</span><span class="p">)</span><span class="n">time</span><span class="p">(</span> <span class="nb">NULL</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">*</span> <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">n</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">PrintList</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d  &quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">*</span> <span class="n">a</span> <span class="o">=</span> <span class="n">GetRandomNum</span><span class="p">(</span><span class="n">NUM</span><span class="p">);</span>
</span><span class='line'>  <span class="n">PrintList</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">NUM</span><span class="p">);</span>
</span><span class='line'>  <span class="n">QuickSort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">NUM</span><span class="p">);</span>
</span><span class='line'>  <span class="n">PrintList</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">NUM</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>Java代码</strong>:</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">arithmetic</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">QuickSort</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="o">{</span><span class="mi">6</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">42</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">67</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">9</span><span class="o">,</span><span class="mi">4</span><span class="o">};</span>
</span><span class='line'>      <span class="n">a</span> <span class="o">=</span> <span class="n">sort</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">&quot;  &quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">sort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">low</span><span class="o">,</span> <span class="kt">int</span> <span class="n">high</span><span class="o">){</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="o">){</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="n">partition</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">low</span><span class="o">,</span> <span class="n">high</span><span class="o">);</span>
</span><span class='line'>          <span class="n">sort</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">low</span><span class="o">,</span> <span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>          <span class="n">sort</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">high</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">partition</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">low</span><span class="o">,</span> <span class="kt">int</span> <span class="n">high</span><span class="o">){</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">key</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">low</span><span class="o">];</span>
</span><span class='line'>      <span class="k">while</span><span class="o">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="o">){</span>
</span><span class='line'>          <span class="k">while</span><span class="o">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="o">[</span><span class="n">high</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">key</span><span class="o">)</span> <span class="n">high</span><span class="o">--;</span>
</span><span class='line'>          <span class="n">a</span><span class="o">[</span><span class="n">low</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">high</span><span class="o">];</span>
</span><span class='line'>          <span class="k">while</span><span class="o">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="o">[</span><span class="n">low</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">key</span><span class="o">)</span> <span class="n">low</span><span class="o">++;</span>
</span><span class='line'>          <span class="n">a</span><span class="o">[</span><span class="n">high</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">low</span><span class="o">];</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">a</span><span class="o">[</span><span class="n">low</span><span class="o">]</span> <span class="o">=</span> <span class="n">key</span><span class="o">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">low</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<blockquote><p>实现一个冒泡排序</p>

<p><strong>C代码</strong>:</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="nf">BubbleSort</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">cup</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">flag</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">){</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>          <span class="n">flag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]){</span>
</span><span class='line'>              <span class="n">cup</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>              <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>              <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">cup</span><span class="p">;</span>
</span><span class='line'>              <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">12</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">54</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">76</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">56</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">4</span><span class="p">};</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BubbleSort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">15</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">15</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d  &quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2014/3/23 11:58:29</p>

<hr />

<blockquote><p>实现希尔排序</p>

<p><strong>C代码</strong>:</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="nf">ShellSort</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="n">n</span><span class="p">,</span> <span class="n">cup</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">d</span><span class="o">=</span><span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span> <span class="n">d</span><span class="o">&gt;=</span><span class="mi">1</span><span class="p">;</span> <span class="n">d</span><span class="o">=</span><span class="n">d</span><span class="o">/</span><span class="mi">2</span><span class="p">){</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">d</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>          <span class="n">cup</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">-</span><span class="n">d</span><span class="p">;</span> <span class="n">j</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&gt;</span><span class="n">cup</span><span class="p">;</span> <span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="o">-</span><span class="n">d</span><span class="p">){</span>
</span><span class='line'>              <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="n">d</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="n">d</span><span class="p">]</span> <span class="o">=</span> <span class="n">cup</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="nf">GetRandomNum</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">srand</span><span class="p">(</span> <span class="p">(</span><span class="kt">unsigned</span><span class="p">)</span><span class="n">time</span><span class="p">(</span> <span class="nb">NULL</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">*</span> <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">n</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">PrintList</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d  &quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">*</span> <span class="n">a</span> <span class="o">=</span> <span class="n">GetRandomNum</span><span class="p">(</span><span class="mi">15</span><span class="p">);</span>
</span><span class='line'>  <span class="n">PrintList</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">15</span><span class="p">);</span>
</span><span class='line'>  <span class="n">ShellSort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">15</span><span class="p">);</span>
</span><span class='line'>  <span class="n">PrintList</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">15</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2014/3/23 13:20:05</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VSim [a Racing-simulator by Vell001]]]></title>
    <link href="http://vblog.vell001.ml/2014/03/09/vsim.html"/>
    <updated>2014-03-09T00:00:00+08:00</updated>
    <id>http://vblog.vell001.ml/2014/03/09/vsim</id>
    <content type="html"><![CDATA[<h2>VSim [a racing-simulator by vell001]</h2>

<p>This is my first project about Racing. I am a Chinese with bad English, and today is my first time to use English to write a post, Sorry for my bad Engilsh first…</p>

<p>I start my project from last year(2013). I am learning from <em><a href="http://www.x-sim.de/forum/memberlist.php?mode=viewprofile&amp;u=2248">RacingMat</a></em>, here is his project:<a href="http://www.x-sim.de/forum/viewtopic.php?t=943">Finished 2DOF 12V DC wiper arduino playseat</a>. Thank <em><a href="http://www.x-sim.de/forum/memberlist.php?mode=viewprofile&amp;u=2248">RacingMat</a></em> very much!<br/>
My project is in progressing, I will update for every detail I finished. </p>

<hr />

<h3>Control Part</h3>

<p>I am using two 12V DC truck wiper motors, bought in <em><a href="http://www.taobao.com">taobao</a></em>;
The controller is <em><a href="http://www.arduino.cc">Arduino Uno</a></em>, and the motor driver is <em><a href="http://item.taobao.com/item.htm?id=16852136684">MotoMonster</a></em>(I don&rsquo;t do any advertising, this is an only one MotoMonster-driver I can find in taobao, I have no choice, so bought this one. Please give me a message if you find anthor driver, my email:<em><a href="mailto:vell001@qq.com">vell001@qq.com</a></em>, thanks.</p>

<p>Here are some pictures:</p>

<blockquote><p><img src="http://images.cnitblog.com/blog/478900/201312/14204352-33791a99c7f743039a95a49b1a05f13c.png" alt="items" /></p>

<p>Something I bought in taobao</p></blockquote>

<hr />

<blockquote><p><img src="http://images.cnitblog.com/blog/478900/201312/14204411-067f1f01ea93464ba7fb6e338787fe5c.jpg" alt="arduino" />
<img src="http://images.cnitblog.com/blog/478900/201312/14204432-85d2d2c0001b4b5c870ae26250de9a45.jpg" alt="arduino" />
<img src="http://images.cnitblog.com/blog/478900/201312/14204511-df9449897b6747e5859d087b5169c950.jpg" alt="arduino" />
<img src="http://images.cnitblog.com/blog/478900/201312/14204545-1fed53785c054128b47ec95138a62de2.jpg" alt="arduino" /></p>

<p>My arduino board, made in China.(*^_^*)</p></blockquote>

<hr />

<blockquote><p><img src="http://images.cnitblog.com/blog/478900/201312/14204614-cbacb685b45e45319b8ebe7792cce7a1.jpg" alt="motor driver" />
<img src="http://images.cnitblog.com/blog/478900/201312/14204643-66954c6dab6d40cb9e53064204d78aad.jpg" alt="motor driver" />
<img src="http://images.cnitblog.com/blog/478900/201312/14204733-42eb29fe70484861b6ecec81f240de5c.jpg" alt="motor driver" /></p>

<p>My motor-driver [MotoMonster], It&rsquo;s very suit for arduino uno.</p></blockquote>

<hr />

<blockquote><p><img src="http://images.cnitblog.com/blog/478900/201312/14204828-0076cac18e7848a4b4a6b20c5cbb02c8.jpg" alt="power" />
<img src="http://images.cnitblog.com/blog/478900/201312/14204853-1db3a2a3d5b9450ea568c07c1ae6847b.jpg" alt="power" />
<img src="http://images.cnitblog.com/blog/478900/201312/14204919-3c0cb01ee7784f7eb616590d145c0ffe.jpg" alt="power" /></p>

<p>My power supply, 12V 30A, look very nice. But the shopkeeper didn&rsquo;t give me a wire,
so sad for me. I am just a university student, have nothing can use for my project in my dormitory. So I broke my socket only for a wire, bad idea&hellip;but I don&rsquo;t have another idea</p></blockquote>

<hr />

<blockquote><p><img src="http://images.cnitblog.com/blog/478900/201312/14205009-32f854f7f8574dbd9a658bf63e0df438.jpg" alt="motor" />
<img src="http://images.cnitblog.com/blog/478900/201312/14205051-8f60ee4eb1a2451b80a58708e6b34776.jpg" alt="motor" />
<img src="http://images.cnitblog.com/blog/478900/201312/14204951-e99d7341dc80467f97da1a361ed05b0a.jpg" alt="motor" /></p>

<p>At first glance, it was bigger and much more powerful than I imagined. Out of curiousity, I splited it, its structure is very simple.<br/>
<img src="http://images.cnitblog.com/blog/478900/201312/14205119-53ae549817ef46dc8a7073b5a7980dfe.jpg" alt="motor" /></p></blockquote>

<hr />

<p>All parts of controller are ready, it&rsquo;s time to put all parts together.</p>

<hr />

<blockquote><p><img src="http://images.cnitblog.com/blog/478900/201312/14205138-39f6ca0545b346db8937baa78d4f3ce4.jpg" alt="controller" />
<img src="http://images.cnitblog.com/blog/478900/201312/14205206-d2a5c0081beb475a855b9b97173015bd.jpg" alt="controller" />
<img src="http://images.cnitblog.com/blog/478900/201312/14205224-ae8e58961e4d4324ac0453cdf3e04627.jpg" alt="controller" />
<img src="http://images.cnitblog.com/blog/478900/201312/14205255-465f5a74f4864281afdaf0e29f3daf14.jpg" alt="controller" /></p>

<p>Who can guess what kind of wire I am using? Yes, I am using <em>Ethernet Cable</em>. I have unpacked 3m <em>Ethernet Cable</em>. <em>Ethernet Cable</em> is a bit hard.</p></blockquote>

<hr />

<blockquote><p><img src="http://images.cnitblog.com/blog/478900/201312/14205323-2f26e09df861425eadc1ab3616114a4b.jpg" alt="potentiometer" />
<img src="http://images.cnitblog.com/blog/478900/201312/14205352-a3a4de41dd3840a0bbecf54e50a03220.jpg" alt="potentiometer" />
<img src="http://images.cnitblog.com/blog/478900/201312/14205416-5e89456d96f942f686ee9c59834e6aa1.jpg" alt="potentiometer" /></p>

<p>I bought those potentiometers from e-market, 10K Ohm. Using those potentiometers and my two motors to DIY two SERVO.</p></blockquote>

<hr />

<blockquote><p>Put circuit diagram here:</p>

<p><img src="http://vblog.vell001.ml/images/20120703223559.gif" width="900"/></p></blockquote>

<hr />

<blockquote><p>My controller&rsquo;s first test video:</p>

<p><embed src="http://www.tudou.com/v/nCs3C961Ixk/&resourceId=0_05_02_99&tid=0/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p></blockquote>

<hr />

<h3>Seat Part</h3>

<p> Yesterday, I bought 12m steel cube. Today I want to get a second-hand <em>cardan</em>.</p>

<p>2014/3/9 13:24:57</p>

<hr />

<p>I was not so lucky, I didn&rsquo;t find a <em>street scrap</em>. I asked a hostess of a garage for a new cardan, her price was so higher than my price that I expected. Then, I went back, and bought in taobao.</p>

<blockquote><p><img src="http://vblog.vell001.ml/images/20140309173426.png" alt="items" /></p>

<p>The cardan&rsquo;s size is 20*32*85 mm; and zhe <em>joint bearing</em> is M5 internal thread.</p></blockquote>

<hr />

<p>I still need some screws, some rebar, and a seat; Most importent thing is an <em>electric welding machine</em>! Good Luck to myself&hellip;</p>

<p>2014/3/9 17:42:37</p>

<hr />

<p>Yesterday, I had finish <em>Steel Skeleton</em> of my simulator, I&rsquo;ll put some picture here later.
I am so unlucky today. In the morning, I tried to fix my two motor on the <em>bottom support</em>, but I have failed. In the afternoon, I fixed my two motor and two <em>Support Bar</em>, I just want to conect all the controller part and adjust some detail, but something wrong with my <em>Driver-Broad</em>, when I turn on power support,   before long, I smelled a burning smell, I saw a <em>Audion</em> just had burned on the driver board. Then, I could adjust one potentiometer and all motor run. Bad luck!!! I&rsquo;ll buy a new driver for my two motors</p>

<p>2014/3/15 23:30:21</p>

<hr />

<p>I received my new <em>MotorDriver</em> today, I will forget <em>MotoMonster-Driver</em></p>

<blockquote><p><img src="http://vblog.vell001.ml/images/20140318182635.jpg" alt="MotorDriver" /></p>

<p>Look good, I&rsquo;ll test it tomorrow</p></blockquote>

<p>I rewrited all codes and redesigned wiring diagram, I&rsquo;ll put my codes here later, here is my own diagram:</p>

<blockquote><p><a href="http://vblog.vell001.ml/images/vsim_wiring_diagram.jpg"><img src="http://vblog.vell001.ml/images/20140318221922.png" alt="diagram" /></a></p>

<p>designed with <em>Photoshop</em></p></blockquote>

<p>2014/3/18 22:16:05</p>

<hr />

<p>I used <em>MonsterDriver</em> back, because the new driver have a big flaw. When my arduino poweroff or reboot, the driver&rsquo;s <em>PWM</em> pin will read some wrong data, and supply power to my motor, then it&rsquo;s will damage all my design.</p>

<p>I&rsquo;ll talk about some details later. I want to put my test video here now:</p>

<p><embed src="http://www.tudou.com/v/83MhztKWNDM/&resourceId=99962045_05_02_99&tid=0/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed>
2014/3/21 23:37:42</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, Github Blog]]></title>
    <link href="http://vblog.vell001.ml/2014/03/08/hello_world.html"/>
    <updated>2014-03-08T00:00:00+08:00</updated>
    <id>http://vblog.vell001.ml/2014/03/08/hello_world</id>
    <content type="html"><![CDATA[<h2>hello, github blog</h2>

<p>hello, I am using github to write a post, I am so exciting&hellip;
08 Mar 2014</p>
]]></content>
  </entry>
  
</feed>
